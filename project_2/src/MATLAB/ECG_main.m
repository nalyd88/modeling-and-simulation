clear all
clc
%% Work based on paper by McSharry "A Dynamical Model for Generating Synthetic 
% Electrocardiogram Signals"

Fs = 100;                 % Fs : sampling frequency (samples/sec)
sfecg = Fs;               % sfecg: ECG sampling frequency [ Hertz]
sfint = sfecg;
M = 10;                   % N: approximate number of heart beats 
Anoise = 0;               % Anoise: Additive uniformly distributed measurement noise [0 mV]
hrmean = 60;              % hrmean: Mean heart rate [60 beats per minute]
hrstd = 1;                % hrstd: Standard deviation of heart rate [1 beat per minute]
lfhfratio = 0.5;          % lfhfratio: LF/HF ratio [0.5]
ti = [-60 -15 0 15 90];  % P  Q  R  S  T   ti = angles of extrema degrees
ti = ti*pi/180;           % convert to radians
ai = [1.2 -5 30 -7.5 0.75];  % ai = z-position of extrema [1.2 -5 30 -7.5 0.75]
bi = [0.25 0.1 0.1 0.1 0.4]; % bi = Gaussian width of peaks [0.25 0.1 0.1 0.1 0.4]


% adjust extrema parameters for mean heart rate 
hrfact =  sqrt(hrmean/60);
hrfact2 = sqrt(hrfact);
bi = hrfact*bi;
ti = [hrfact2 hrfact 1 hrfact hrfact2].*ti
q = round(sfint/sfecg);

% frequency parameters for rr process flo and fhi are the Mayer waves and respiratory rate respectively
flo = 0.1;
fhi = 0.25;
flostd = 0.01;
fhistd = 0.01;

% compute rr process

n = M; 
sfrr = 1; %sampling frequency
w1 = 2*pi*flo;
w2 = 2*pi*fhi;
c1 = 2*pi*flostd;
c2 = 2*pi*fhistd;
sig2 = 1;
sig1 = lfhfratio;
rrmean = 60/hrmean;
rrstd = 60*hrstd/(hrmean*hrmean);

df = sfrr/n;
w = [0:n-1]'*2*pi*df;
dw1 = w-w1;
dw2 = w-w2;

Hw1 = sig1*exp(-0.5*(dw1/c1).^2)/sqrt(2*pi*c1^2);
Hw2 = sig2*exp(-0.5*(dw2/c2).^2)/sqrt(2*pi*c2^2);
Hw = Hw1 + Hw2;
Hw0 = [Hw(1:n/2); Hw(n/2:-1:1)];
Sw = (sfrr/2)*sqrt(Hw0);

ph0 = 2*pi*rand(n/2-1,1);
ph = [ 0; ph0; 0; -flipud(ph0) ]; 
SwC = Sw .* exp(j*ph);
x = (1/n)*real(ifft(SwC));

xstd = std(x);
ratio = rrstd/xstd;
rr = rrmean + x*ratio;
size(rr)
% upsample rr time series from 1 Hz to sfint Hz
rr = interp(rr,sfint);

% make the rrn time series
dt = 1/sfint;

% integrate system using fourth order Runge-Kutta
x0 = [1,0,0.04];
Tspan = [dt:dt:size(x)];
[T,X0] = ode45('derivsecgsyn',Tspan,x0,[],rr,sfint,ti,ai,bi);

% downsample to required sfecg
X = X0(1:q:end,:);

% Scale signal to lie between -0.4 and 1.2 mV
z = X(:,3);
zmin = min(z);
zmax = max(z);
zrange = zmax - zmin;
z = (z - zmin)*(1.6)/zrange -0.4;

% include additive uniformly distributed measurement noise 
eta = 2*rand(length(z),1)-1;
ecg = z + Anoise*eta;

figure (1)
plot(T, ecg)
title('ECG generated by dynamical model');
xlabel('time (sec)','FontSize',14,'FontWeight','bold','Color','b')
ylabel('ECG (mv)','FontSize',14,'FontWeight','bold','Color','b')



N = length(ecg);
n = 0:N-1;
sigma = 0.1;                    % sigma : noise standard deviation
noise = sigma * randn(N, 1);    % noise : white Gaussian noise
data = ecg + noise;             % data : noisy ECG
ax1 = [0 N -1.0 2.0];
figure(2)

subplot(2,1,1)
plot(n, ecg)
title('ECG generated by dynamical model (noise-free)');
xlabel('ECG sampling frequency','FontSize',14,'FontWeight','bold','Color','b')
ylabel('ECG (mv)','FontSize',14,'FontWeight','bold','Color','b')
axis(ax1)

subplot(2,1,2)
plot(n, data)
title('ECG generated by dynamical model (with noise)');
xlabel('ECG sampling frequency','FontSize',14,'FontWeight','bold','Color','b')
ylabel('ECG (mv)','FontSize',14,'FontWeight','bold','Color','b')
axis(ax1)
